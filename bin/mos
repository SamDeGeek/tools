#!/bin/bash

echo "MOS Utility by sam.k.tan@oracle.com"
if [[ $# -eq 0 ]]; then
	cmd="help"
else
	cmd=$1
fi


WGETCMD=$(which wget)
CURLCMD=$(which curl)


s1 () {
	# ps -C wget -o pid= | while read n; do echo $n; realpath /proc/${n}/cwd; cat /proc/${n}/cmdline | sed 's/\x0/ /g'; echo; done;
	for n in $(ps -C wget -o pid=); do
		echo "PID: ${n}"
		cwd=$(realpath /proc/${n}/cwd)
		cmdargs=$(cat /proc/${n}/cmdline | sed 's/\x0/ /g')
		if [[ ${cmdargs} =~ -O (.+) -o (.+) ]]; then
			patchfile=${BASH_REMATCH[1]}
			logfile=${BASH_REMATCH[2]}
		fi
		echo ${cwd}
		echo ${cmdargs}
		echo ${patchfile}
		echo ${logfile}
	done
}


s () {
	echo "Status of moswget downloads based on *.log files ..."
	wgetc=$(ps -C wget -o pid= | wc -l)
	ps -C wget -o command | while read line; do
		[[ $line =~ https://updates.oracle.com/Orion/Services/download/[^\ \"]+ ]] && echo "RUNNING: ${BASH_REMATCH[0]##*&}";
	done;
	printf "wget instances running: %d\n" ${wgetc}


	for f in `ls *.zip.log`; do
		# echo $f
		name=$(basename $f '.log')
		age=$(($(date +%s) - $(date -r "$f" +%s)))
		n=$(cat ${f} | grep '100%')
		if [ $? -eq 0 ]; then
			printf "DONE:  %s \n\n" ${name}
		elif [ ${age} -gt 3600 ]
		then
			printf "STALLED:  %s\n\n" ${name}
		else
			printf "PROGRESS:  %s  (progress / bandwidth / time remaining)\n" ${name}
			cat ${f} | grep '%' | tail -1
		fi
	done
}


# upload a file to MOS for the given SR number
u () {
	printf "File: "; read f;
	p=$(realpath "${f}");
	[ ! -f "${p}" ] && echo "Not a file." && return 1;
	printf "SR: "; read s;
	printf "Login: "; read l;
	u="https://transport.oracle.com/upload/issue/${s}/";
	curl --verbose --progress-bar --user ${l} --upload-file "${p}" ${u};
}


# download a collection of URL from MOS
d () {
	# Trap to cleanup cookie file in case of unexpected exits.
	trap 'rm -f $COOKIE_FILE; exit 1' 1 2 3 6

	LOGDIR=.
	LOGFILE=$LOGDIR/wget-log-$(date +%Y-%m-%dT%H:%M:%S).log
	echo "Writing to log file $LOGFILE"
	OUTPUT_DIR=.

	COOKIE_FILE=$(mktemp -t wget_sh_XXXXXX) >> "$LOGFILE" 2>&1
	if [ $? -ne 0 ] || [ -z "$COOKIE_FILE" ]; then
		echo "Temporary cookie file creation failed. See $LOGFILE for more details." |	tee -a "$LOGFILE"
		exit 1
	fi
	echo "Created temporary cookie file $COOKIE_FILE" >> "$LOGFILE"

	# The following command to authenticate uses HTTPS. This will work only if the wget in the environment
	# where this script will be executed was compiled with OpenSSL. 
	#
	# SSO username
	printf 'SSO Username: '
	read SSO_USERNAME < /dev/tty
	printf 'SSO Password: '
	${WGETCMD}	--secure-protocol=auto --save-cookies="$COOKIE_FILE" --keep-session-cookies	 --http-user "$SSO_USERNAME" --ask-password	 "https://updates.oracle.com/Orion/Services/download" -O /dev/null 2>> "$LOGFILE"

	# Verify if authentication is successful
	if [ $? -ne 0 ]; then
		echo "Authentication failed with the given credentials." | tee -a "$LOGFILE"
		echo "Please check logfile: $LOGFILE for more details."
		exit 1
	else
		echo "Authentication is successful. Proceeding with downloads..." | tee -a "$LOGFILE"
	fi
	printf "\n"

	echo "Enter URLs one at a time and press RETURN, type Ctrl-D to exit."
	while IFS='' read inputline; do
		# scan for lines that contain this specific URL format
		if [[ $inputline =~ https://updates.oracle.com/Orion/Services/download/[^\ \"]+ ]]; then
			url="${BASH_REMATCH[0]}"
			# scan for a patchfile parameter
			patchfile="" && [[ $url =~ patch_file=([^\ \&\"]+) ]] && patchfile="${BASH_REMATCH[1]}"
			# scan for a filename parameter
			filename="" && [[ $url =~ fileName=([^\ \&\"]+) ]] && filename="${BASH_REMATCH[1]}"
			# if there is no patchfile parameter, use the filename parameter
			[ -z $patchfile ] && patchfile="$filename"

			if [ -z "$patchfile" ]; then
				echo "No patchfile name found in URL, try again."
			else
				echo "Downloading $patchfile from $url" >> $LOGFILE
				echo "Downloading $patchfile ..."
				${WGETCMD} --background --load-cookies="$COOKIE_FILE" "$url" -O "$OUTPUT_DIR/$patchfile" -o "$OUTPUT_DIR/${patchfile}.log" >> "$LOGFILE" 2>&1 
			fi
			echo "Next URL ... (Ctrl-D when done)"
		fi
	done

	echo "Wait 20s the background processes to start ..."
	sleep 20
	# Cleanup
	rm -f "$COOKIE_FILE"
	echo "Removed temporary cookie file $COOKIE_FILE" >> "$LOGFILE"
}


# verify downloaded patch files and unzip into corresponding directory
v () {
	CWD=$(pwd)
	for n in `ls p*.zip`; do
		echo "CHECK ... $n"
		if [[ $n =~ (p.*)(_[0-9]{1,2}of[0-9]{1,2})\.zip ]]; then
			d=${BASH_REMATCH[1]}
		else
			d=${n%.zip}
		fi
		echo "UNPACK TO $d"
		mkdir -p $d
		cd $d
		unzip ../$n
		cd $CWD
		[[ $? -eq 0 ]] && rm ${n}.log
	done
}


case ${cmd} in
	status)
		shift
		s $*
		;;
	upload)
		shift
		u $*
		;;
	download)
		shift
		d $*
		;;
	unpack)
		shift
		v $*
		;;
	help|*)
		echo "Unknown command: $1"
		;;
esac
